# Makefile.in generated by automake 1.16.1 from Makefile.am.
# tests/XSLTMark/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2018 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


VPATH = ../../../../tests/XSLTMark
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/libxslt
pkgincludedir = $(includedir)/libxslt
pkglibdir = $(libdir)/libxslt
pkglibexecdir = $(libexecdir)/libxslt
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
subdir = tests/XSLTMark
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__DIST_COMMON = $(srcdir)/Makefile.in
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/richard/debs/misc/libxslt/libxslt/missing aclocal-1.16
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = xiar
AS = as
AUTOCONF = ${SHELL} /home/richard/debs/misc/libxslt/libxslt/missing autoconf
AUTOHEADER = ${SHELL} /home/richard/debs/misc/libxslt/libxslt/missing autoheader
AUTOMAKE = ${SHELL} /home/richard/debs/misc/libxslt/libxslt/missing automake-1.16
AWK = mawk
CC = icc
CCDEPMODE = depmode=none
CFLAGS = -g -O2 -fdebug-prefix-map=/home/richard/debs/misc/libxslt/libxslt=. -fstack-protector-strong -Wformat -Werror=format-security -march=native -pipe -Wall -Wformat=2 -Wmissing-format-attribute
CPP = icc -E
CPPFLAGS = -Wdate-time -D_FORTIFY_SOURCE=2
CRYPTO_TESTDIR = crypto
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
EXSLT_INCLUDEDIR = -I${includedir}
EXSLT_LIBDIR = -L${libdir}
EXSLT_LIBS = -lexslt -lxslt -lxml2
EXTRA_LIBS = 
FGREP = /bin/grep -F
GREP = /bin/grep
HTML_DIR = $(datadir)/doc/$(PACKAGE)-$(VERSION)/html
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = xild -m elf_x86_64
LDFLAGS = -Wl,-z,relro -Wl,-z,now -Wl,--as-needed,--gc-sections,--stats -Wl,--as-needed
LIBEXSLT_MAJOR_VERSION = 0
LIBEXSLT_MICRO_VERSION = 20
LIBEXSLT_MINOR_VERSION = 8
LIBEXSLT_VERSION = 0.8.20
LIBEXSLT_VERSION_EXTRA = 
LIBEXSLT_VERSION_INFO = 8:20:8
LIBEXSLT_VERSION_NUMBER = 820
LIBGCRYPT_CFLAGS = 
LIBGCRYPT_CONFIG = /usr/bin/libgcrypt-config
LIBGCRYPT_LIBS = -lgcrypt
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBXML_CFLAGS = -I/usr/include/libxml2
LIBXML_LIBS = -lxml2
LIBXML_REQUIRED_VERSION = 2.6.27
LIBXML_SRC = 
LIBXSLT_DEFAULT_PLUGINS_PATH = /usr/lib/x86_64-linux-gnu/libxslt-plugins
LIBXSLT_MAJOR_MINOR_VERSION = 1.1
LIBXSLT_MAJOR_VERSION = 1
LIBXSLT_MICRO_VERSION = 32
LIBXSLT_MINOR_VERSION = 1
LIBXSLT_VERSION = 1.1.32
LIBXSLT_VERSION_EXTRA = 
LIBXSLT_VERSION_INFO = 2:32:1
LIBXSLT_VERSION_NUMBER = 10132
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAINT = #
MAKEINFO = ${SHELL} /home/richard/debs/misc/libxslt/libxslt/missing makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
M_LIBS = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = libxslt
PACKAGE_BUGREPORT = 
PACKAGE_NAME = libxslt
PACKAGE_STRING = libxslt 1.1.32
PACKAGE_TARNAME = libxslt
PACKAGE_URL = 
PACKAGE_VERSION = 1.1.32
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
PYTHON = 
PYTHONSODV = 
PYTHON_INCLUDES = 
PYTHON_LIBS = 
PYTHON_SITE_PACKAGES = 
PYTHON_SUBDIR = 
PYTHON_VERSION = 
RANLIB = ranlib
RELDATE = Mon Dec  3 2018
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
THREAD_LIBS = -lpthread
VERSION = 1.1.32
VERSION_SCRIPT_FLAGS = -Wl,--version-script=
WIN32_EXTRA_LDFLAGS = 
WIN32_EXTRA_LIBADD = 
WITH_CRYPTO = 1
WITH_DEBUGGER = 1
WITH_MEM_DEBUG = 0
WITH_MODULES = 1
WITH_TRIO = 0
WITH_XSLT_DEBUG = 1
XMLLINT = /usr/bin/xmllint
XML_CONFIG = /usr/bin/xml2-config
XSLTPROC = /usr/bin/xsltproc
XSLTPROCDV = 
XSLT_INCLUDEDIR = -I${includedir}
XSLT_LIBDIR = -L${libdir}
XSLT_LIBS = -lxslt -lxml2
abs_builddir = /home/richard/debs/misc/libxslt/libxslt/builddir/main/tests/XSLTMark
abs_srcdir = /home/richard/debs/misc/libxslt/libxslt/builddir/main/../../tests/XSLTMark
abs_top_builddir = /home/richard/debs/misc/libxslt/libxslt/builddir/main
abs_top_srcdir = /home/richard/debs/misc/libxslt/libxslt/builddir/main/../..
ac_ct_AR = 
ac_ct_CC = icc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = x86_64-linux-gnu
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${prefix}/share/info
install_sh = ${SHELL} /home/richard/debs/misc/libxslt/libxslt/install-sh
libdir = ${prefix}/lib/x86_64-linux-gnu
libexecdir = ${prefix}/lib/x86_64-linux-gnu
localedir = ${datarootdir}/locale
localstatedir = /var
mandir = ${prefix}/share/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
pythondir = 
runstatedir = /run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = ../../../../tests/XSLTMark
sysconfdir = /etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../../../..
EXTRA_DIST = \
  dbgen.pl \
  alphabetize.out alphabetize.ref alphabetize.xsl \
  attsets.out attsets.ref attsets.xsl \
  avts.out avts.ref avts.xsl \
  axis.out axis.ref axis.xml axis.xsl \
  backwards.out backwards.ref backwards.xsl \
  bottles.out bottles.ref bottles.xml bottles.xsl \
  breadth.out breadth.ref breadth.xml \
  brutal.out brutal.ref brutal.xml brutal.xsl \
  chart.out chart.ref chart.xml chart.xsl \
  creation.out creation.ref creation.xsl \
  current.out current.ref current.xml current.xsl \
  dbonerow.out dbonerow.ref dbonerow.xsl \
  dbtail.out dbtail.ref dbtail.xsl \
  decoy.out decoy.xsl \
  depth.out depth.ref depth.xml \
  encrypt.out encrypt.ref encrypt.xsl \
  find.xsl \
  functions.out functions.ref functions.xsl \
  game.out game.ref game.xml game.xsl \
  gettysburg.xml \
  html.out html.ref html.xml html.xsl \
  identity.out identity.ref identity.xml identity.xsl \
  inventory.out inventory.ref inventory.xml inventory.xsl \
  metric.out metric.ref metric.xml metric.xsl \
  number.out number.xml number.xsl \
  oddtemplate.out oddtemplate.ref oddtemplate.xml oddtemplate.xsl \
  patterns.out patterns.ref patterns.xsl \
  prettyprint.out prettyprint.ref prettyprint.xsl \
  priority.out priority.ref priority.xml priority.xsl \
  products.out products.ref products.xml products.xsl \
  queens.out queens.ref queens.xml queens.xsl \
  reverser.out reverser.ref reverser.xsl \
  stringsort.out stringsort.ref stringsort.xsl \
  summarize.out summarize.ref summarize.xsl \
  total.out total.ref total.xsl \
  tower.out tower.ref tower.xml tower.xsl tower2.xsl \
  trend.out trend.ref trend.xml trend.xsl \
  union.out union.ref union.xml union.xsl \
  xpath.out xpath.ref xpath.xml xpath.xsl \
  xslbench1.out xslbench1.xml xslbench1.xsl \
  xslbench2.out xslbench2.xsl \
  xslbench3.out xslbench3.xsl \
  xslbenchdream.xml

ALL_TESTS = alphabetize attsets avts axis backwards bottles breadth brutal chart \
  creation current dbonerow dbtail decoy depth encrypt functions game \
  html identity inventory metric number oddtemplate patterns prettyprint \
  priority products queens reverser stringsort summarize total tower trend \
  union xpath xslbench1 xslbench2 xslbench3

xsltproc = $(top_builddir)/xsltproc/xsltproc
CLEANFILES = *.tmp *~ .memdump core db100.xml db1000.xml db10000.xml
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign tests/XSLTMark/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign tests/XSLTMark/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
tags TAGS:

ctags CTAGS:

cscope cscopelist:


distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic clean-libtool \
	cscopelist-am ctags-am distclean distclean-generic \
	distclean-libtool distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags-am uninstall uninstall-am

.PRECIOUS: Makefile


dummy $(ALL_TESTS:=.out):
	$(MAKE) $(@:.out=)

$(xsltproc):
	cd ../../xsltproc && $(MAKE) xsltproc

test tests:
	@echo '## Running XSLTMark tests'
	@$(MAKE) $(ALL_TESTS)

valgrind:
	@echo '## Running the regression tests under Valgrind'
	$(MAKE) CHECKER='libtool --mode=execute valgrind -q --leak-check=full' tests

db100.xml: $(srcdir)/dbgen.pl
	$(PERL) $(srcdir)/dbgen.pl 100 > db100.xml

db1000.xml: $(srcdir)/dbgen.pl
	$(PERL) $(srcdir)/dbgen.pl 1000 > db1000.xml

db10000.xml: $(srcdir)/dbgen.pl
	$(PERL) $(srcdir)/dbgen.pl 10000 > db10000.xml

alphabetize:	db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

avts:			db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

creation:		db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

dbonerow:		db10000.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

dbtail:		db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

decoy:		db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

encrypt:		db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

functions:		db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

identity:		db1000.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

patterns:		db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

prettyprint:	db100.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

stringsort:		db1000.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

#alphabetize:
#avts:
#creation:
#dbonerow:
#dbtail:
#decoy:
#encrypt:
#functions:
#identity:
#patterns:
#prettyprint:
#stringsort:

attsets:		chart.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

axis:			axis.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

backwards:		game.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

bottles:		bottles.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

brutal:		brutal.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

chart:		chart.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

current:		current.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

game:			game.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

html:			html.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

inventory:		inventory.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

metric:		metric.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

number:		number.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

oddtemplate:	oddtemplate.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

priority:		priority.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

products:		products.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

queens:		queens.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

reverser:		gettysburg.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

summarize:		queens.xsl $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

total:		chart.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

tower:		tower.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

trend:		trend.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

union:		union.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

xpath:		xpath.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

xslbench1:		xslbench1.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

xslbench2:		xslbenchdream.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

xslbench3:		xslbenchdream.xml $(xsltproc)
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/$@.xsl $< > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

breadth: $(xsltproc)
	@test -f breadth.xml || $(LN_S) $(srcdir)/breadth.xml .
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/find.xsl $@.xml > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

depth: $(xsltproc)
	@test -f depth.xml || $(LN_S) $(srcdir)/depth.xml .
	@(echo > .memdump)
	@log=`$(CHECKER) $(xsltproc) \
		$(srcdir)/find.xsl $@.xml > $@.tmp; \
	  if [ ! -f $(srcdir)/$@.out ] ; then \
		cp $@.tmp $(srcdir)/$@.out ; \
	  else \
		diff $(srcdir)/$@.out $@.tmp ; \
	  fi ; \
	  grep "MORY ALLO" .memdump  | grep -v "MEMORY ALLOCATED : 0" || true`
	@if [ -n "$$log" ] ; then \
	  	echo $@ result ; \
		echo "$$log" ; \
	fi
	@rm -f $@.tmp

.PHONY: test tests valgrind $(ALL_TESTS)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
